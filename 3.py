class NodoDecision: # Clase para representar un nodo en el √°rbol de decisiones
    def __init__(self, pregunta=None, diagnostico=None): # Inicializa un nodo con una pregunta o diagn√≥stico
        self.pregunta = pregunta # Pregunta que se hace al usuario
        self.diagnostico = diagnostico # Diagn√≥stico final si es un nodo hoja
        self.si = None  # Rama para respuesta "s√≠"
        self.no = None  # Rama para respuesta "no"

# Nodos hoja (diagn√≥sticos)
diagnostico1 = NodoDecision(diagnostico="El dispositivo funciona correctamente.")
diagnostico2 = NodoDecision(diagnostico="Problema con la pantalla.")
diagnostico3 = NodoDecision(diagnostico="Falla interna del sistema.")
diagnostico4 = NodoDecision(diagnostico="Cargar el dispositivo.")

# Nodos intermedios (preguntas)
pregunta2 = NodoDecision(pregunta="¬øFunciona la pantalla?")
pregunta2.si = diagnostico1
pregunta2.no = diagnostico2

pregunta3 = NodoDecision(pregunta="¬øEst√° cargado?")
pregunta3.si = diagnostico3
pregunta3.no = diagnostico4

# Nodo ra√≠z
raiz = NodoDecision(pregunta="¬øEl dispositivo enciende?")
raiz.si = pregunta2
raiz.no = pregunta3

# Funci√≥n para recorrer el √°rbol de decisiones
def diagnosticar(nodo):
    while nodo:
        if nodo.diagnostico:
            print("\nDiagn√≥stico:", nodo.diagnostico)
            return
        respuesta = input(nodo.pregunta + " (si/no): ").strip().lower()
        if respuesta in ["s√≠", "si", "s"]:
            nodo = nodo.si
        elif respuesta == "no" or respuesta == "n":
            nodo = nodo.no
        else:
            print("Por favor responde 's√≠' o 'no'.")

# Ejecutar el diagn√≥stico
if __name__ == "__main__":
    print("üõ†Ô∏è Asistente de diagn√≥stico para dispositivo electr√≥nico üõ†Ô∏è\n")
    diagnosticar(raiz)

